The A-OODA Protocol: A Framework for Agentic Self-Improvement




I. Introduction: From Reactive Execution to Reflective Evolution


The proliferation of Large Language Model (LLM) based agents represents a significant milestone in the field of artificial intelligence. These systems have demonstrated a remarkable capacity to execute complex, multi-step tasks by synergizing deductive reasoning with the use of external tools.1 Frameworks such as ReAct (Reasoning and Acting) have become the de facto standard, enabling agents to decompose problems, interact with APIs, and generate solutions with a degree of autonomy previously unattainable.1 This paradigm has proven effective for a wide range of tactical applications, from sophisticated question-answering to interactive decision-making.2 However, this report posits that the very success of these reactive frameworks has obscured a more profound and consequential challenge: the creation of agents capable of genuine, long-term self-improvement.
The user query specifies a development toolchain for agentic self-improvement, a goal that transcends mere task completion. An agent designed for such a purpose is not simply a problem-solver; it is a system whose primary objective is to enhance its own capabilities, refine its cognitive architecture, and evolve its decision-making processes over time. The current generation of agentic protocols, typified by the ReAct model, is architecturally insufficient for this grander challenge. Their operational loops are fundamentally tactical, designed to find a "final answer" for a given prompt.1 They are engineered to use their existing tools effectively but lack the innate mechanisms to step back, reflect on their own performance, and fundamentally redesign how they solve problems. This creates a critical competency trap: we are building highly skilled cognitive technicians, while the frontier demands the creation of cognitive strategists and innovators capable of systemic evolution.
This report provides a critical analysis of the prevailing ReAct paradigm, identifying its architectural limitations for the advanced use case of self-improvement. It then proposes a superior, hierarchical cognitive architecture—the Agile-Oriented OODA (A-OODA) protocol. This novel framework addresses the shortcomings of reactive loops by integrating three powerful concepts from disparate domains. First, it adopts the military-derived OODA loop (Observe, Orient, Decide, Act) as its core operational engine, providing a robust framework for strategic decision-making under uncertainty.4 Second, it incorporates the systemic improvement principles of the Agile Manifesto, establishing a meta-cognitive cycle for the agent to reflect upon and iteratively enhance its own processes.6 Finally, it subordinates the tactical efficiency of ReAct-style execution as a primitive subroutine within this more sophisticated architecture.
The purpose of this document is to move the conversation from programming reactive behaviors to architecting reflective, evolving systems. It will first deconstruct the ReAct model to establish a clear rationale for a new approach. It will then introduce the theoretical foundations of the OODA loop and Agile principles as the necessary components for a more advanced agent. The core of the report will synthesize these elements into the formal A-OODA protocol. Finally, it will translate this theoretical protocol into a concrete, actionable blueprint for implementation: a detailed specification for an AGENTS.md file, a living document designed to serve as the agent's dynamic constitution. This work provides a roadmap for developing the next generation of autonomous systems—agents that not only act, but also learn, adapt, and evolve.


II. A Critical Analysis of the ReAct Paradigm (The "Jules Protocol")


To understand the necessity of a new agentic framework, one must first conduct a rigorous analysis of the current state-of-the-art, represented by the ReAct paradigm. This protocol, which we will refer to as the "Jules Protocol" in the context of the user's query, was a groundbreaking development that successfully bridged the gap between the internal reasoning of LLMs and the external world of data and tools. Its strengths are significant and form the foundation upon which future progress must be built. However, for the specific and demanding task of agentic self-improvement, its architectural limitations are not merely incremental but fundamental.


Deconstructing ReAct


The core mechanism of the ReAct framework is an interleaved loop of Thought, Action, and Observation.1 This structure was designed to synergize the step-by-step reasoning capabilities of Chain-of-Thought (CoT) prompting with the ability to act upon an environment using external tools.9 In this loop, the agent first generates a Thought, a verbalized reasoning trace that decomposes the larger task and plans the immediate next step. This is followed by an Action, which typically involves querying an external tool, such as a search engine or a database API. Finally, the agent receives an Observation, which is the output from the tool. This observation then informs the next Thought, creating an iterative cycle that continues until the agent determines it can provide a final answer.1
The strengths of this approach are manifold and explain its widespread adoption:
* Explainability: The explicit Thought process provides a transparent, human-readable trace of the agent's reasoning. This is invaluable for debugging the agent's behavior, understanding its decision-making process, and building user trust.1 It externalizes the LLM's internal "thinking," making the agent less of a black box.
* Grounding: By interacting with external information sources, ReAct agents can ground their reasoning in real-time, factual data. This directly mitigates the critical issue of "fact hallucination," where LLMs confidently generate incorrect information based on their static training data. This ability to interface with knowledge bases like Wikipedia has proven highly effective in tasks like fact verification and complex question-answering.3
* Task Decomposition: The framework excels at breaking down complex, ambiguous queries into a series of smaller, more manageable subtasks. The Thought step allows the agent to maintain and update an action plan, handling the problem in a structured, sequential manner.1


Architectural Flaws for Self-Improvement


Despite these strengths, the ReAct architecture exhibits deep-seated flaws when viewed through the lens of long-term, autonomous self-improvement. These are not minor issues to be patched but are inherent consequences of the protocol's design philosophy.


1. Tactical Myopia and Lack of Strategic Context


The ReAct loop is inherently short-sighted and tactical. Each cycle is a discrete problem-solving attempt focused on advancing toward a "final answer" for the current prompt.1 The agent's cognitive horizon is limited to the next logical action based on the last observation. This creates a state of "tactical myopia," where the agent is perpetually "in the weeds," executing a linear trajectory of steps without a persistent, higher-level cognitive layer to place the current task within a broader strategic context.8 It can determine what to do next, but it has no mechanism to ask why it is pursuing its current plan or whether a fundamentally different approach might be superior. For a self-improving agent, this is a critical deficiency. Such an agent must be able to reason about its own processes, manage long-term goals, and allocate its cognitive resources strategically—activities that require a level of abstraction the flat, linear ReAct loop does not provide.


2. Fragility in Ambiguous Environments


A well-documented weakness of the ReAct paradigm is its fragility in the face of uncertainty or noisy feedback. The framework's performance degrades significantly when external tools return non-informative, ambiguous, or misleading results. This "derails the model reasoning and leads to difficulty in recovering and reformulating thoughts".8 The agent, lacking a robust mechanism for sense-making, often gets stuck, attempting minor variations of the failed action rather than fundamentally re-evaluating its entire approach. This fragility is acceptable when an agent operates in a well-defined environment with reliable tools. However, for a self-improving agent, the environment is its own evolving code and the vast, unpredictable external world. It must constantly explore, experiment, and operate with incomplete information. In such a domain, ambiguity and "non-informative" results are not exceptions but the norm. A protocol that is easily derailed by them is fundamentally unsuited for the task of learning and exploration.


3. Absence of a Formal Reflection Mechanism


The ReAct loop consists of Thought -> Action -> Observation. While some custom implementations mention a "pause" for reflection 10, this is not a core, formalized component of the original paradigm, and it still operates within the tactical loop. The protocol lacks a dedicated, out-of-band process for meta-cognition. The agent observes the result of an action, but it has no architecturally mandated step to reflect on the quality of its own thought process, the effectiveness of its chosen tool, or the validity of its overall plan. This prevents it from learning from its mistakes at a procedural level. It might learn that a specific search query failed, but it cannot easily learn that its method for generating search queries is flawed. This inability to perform systemic self-assessment and process improvement is the single greatest barrier to achieving genuine self-improvement.


4. The "Waterfall" Analogy


At its core, the ReAct loop operates as a series of micro-"Waterfall" processes.11 It "plans" (Thought), then "executes" (Action), then "tests" (Observation). This is a rigid, sequential model. If the initial Thought is based on a flawed premise, the entire sequence is rendered inefficient or fails completely, requiring a full restart of the loop with a new thought. This contrasts sharply with the iterative, adaptive nature required for continuous improvement, which is better modeled by Agile methodologies that embrace change and feedback at every stage rather than at the end of a linear sequence.7
The ReAct paradigm implicitly models intelligence as a largely Markovian process, where the agent's next state (Thought_{N+1}) is determined almost exclusively by its present state (Observation_N). This is a profound architectural limitation. Higher intelligence, and particularly the capacity for self-improvement, is fundamentally non-Markovian. It necessitates the integration of a rich history of past experiences (episodic memory), deeply ingrained skills (procedural memory), and a stable model of the world to inform any given decision. ReAct's structure does not provide the formal components for this deep synthesis, conflating the simple act of "observing" a new piece of data with the far more complex cognitive task of "orienting" one's entire worldview in light of it. This distinction is the critical entry point for a more powerful cognitive architecture.


III. Integrating Strategic Cognition: The OODA Loop as the Agent's Core Operational Engine


The architectural deficiencies of the ReAct paradigm—its tactical myopia, fragility, and lack of reflective mechanisms—necessitate a move to a more robust and strategically-minded operational framework. The OODA loop, a decision-making model developed by U.S. Air Force Colonel John Boyd, provides this superior governing structure. Originally conceived for fighter pilots in the chaos of aerial combat, the OODA loop is a framework for making rapid, effective decisions in dynamic, high-stakes environments.14 Its principles have since been successfully adapted to a wide range of competitive domains, including business strategy, law enforcement, and software development.4 By replacing the linear ReAct trajectory with the cyclical, adaptive OODA loop, we can reposition the agent from a simple task-executor to a dynamic, strategic actor capable of thriving under uncertainty.


The Four Stages of the OODA Loop


The OODA loop consists of a recurring cycle of four distinct yet deeply interconnected stages: Observe, Orient, Decide, and Act.
* Observe: The first stage is about comprehensive data gathering. This is a more active and holistic process than the passive Observation step in ReAct. The agent must collect information from all available sources: external inputs like user prompts and API call results, internal sensors monitoring its own state and performance, and, crucially, the feedback from its own previous actions.4 The goal is to build the most accurate and complete picture of the current situation possible, consciously separating raw signals from environmental noise.18
* Orient: This stage is the cognitive engine of the entire framework and its most critical component.17 Orientation is the complex, non-linear process of synthesizing the raw data from the Observe phase to form a coherent mental model or worldview. This is where the agent makes sense of the situation. Boyd broke this phase down further, explaining that orientation is shaped by multiple factors: cultural traditions (the agent's core programming and values), genetic heritage (its fundamental architectural constraints), past experiences (its episodic memory), and the analysis and synthesis of new information.17 This is the explicit step missing from ReAct. It forces the agent to challenge its own biases, update its understanding of the world, and form a rich, contextual basis for a decision.
* Decide: Based on the rich, contextual understanding formed during the Orient phase, the agent formulates a course of action. Importantly, in the OODA philosophy, this is not about finding a single, perfect plan. Instead, the decision is framed as a hypothesis.17 The agent selects the best available option given the current orientation, with the understanding that this decision will be tested in the real world and the outcome will be used to inform future loops.
* Act: The final stage is the execution of the decision. The agent implements its chosen course of action. However, unlike a simple execution step, the Act phase is performed with the explicit purpose of generating feedback. The results of the action, whether successful, failed, or surprising, are not endpoints but are the primary source of new data for the Observe phase of the very next loop, thus creating a continuous, self-correcting cycle.4


Why OODA is Superior to ReAct as a Core Loop


Adopting the OODA loop as the agent's core operational engine directly addresses the architectural flaws of the ReAct protocol.
* 1. The Primacy of Orientation: By formalizing the Orient phase, an OODA-based agent is inherently more robust in the face of ambiguity and uncertainty. When an observation is confusing or contradictory—the very situation that derails a ReAct agent 8—the OODA agent has a dedicated process for sense-making. It can pause its forward momentum to deeply re-orient, synthesizing the confusing data with its past experiences to form a new, more accurate mental model before proceeding. This directly remedies ReAct's critical fragility.
* 2. Non-Linear and Iterative by Design: The OODA loop is not a rigid, linear sequence. It is a dynamic and non-linear cycle.18 An agent can, for instance, move from the Orient phase back to Observe if it determines more data is needed before a decision can be made. It can cycle through the loop with extreme rapidity, aiming to "get inside" an opponent's decision cycle—or in this case, to adapt to a changing environment faster than its own prior, less-effective self can.5 This provides a truly agile cognitive process, in stark contrast to the rigid Thought-Action-Observation trajectory.
* 3. Embracing Uncertainty and Experimentation: The OODA loop was designed for environments where complete information is a luxury that does not exist.21 The framing of the Decide phase as a hypothesis and the Act phase as an experiment is a profound philosophical shift. This mindset is perfectly suited for an agent that must learn and improve through exploration. It transforms the agent's interaction with its tools. In ReAct, a tool is a means of execution. In OODA, a tool is an instrument for testing a hypothesis and generating new observations to refine orientation. This elevates the agent from a simple tool-user to an experimental scientist, a crucial prerequisite for meaningful self-improvement.
This new architecture fundamentally changes the agent's relationship with failure. In the ReAct model, an unexpected or null result from an action is an error state, a disruption to the planned sequence. For an agent governed by the OODA loop, there is no such thing as a useless observation. An outcome that contradicts the agent's hypothesis is immensely valuable data. It signals a flaw in the agent's mental model, forcing a deep re-evaluation during the next Orient phase. Failure is thus not a bug to be avoided, but the primary and most potent driver of learning and model refinement. This grants the agent a form of "epistemic curiosity"—an implicit drive to test the boundaries of its own understanding—that is entirely absent in more rigid, plan-following architectures.


IV. A Meta-Cognitive Framework: Applying Agile Principles for Systemic Growth


While the OODA loop provides a superior engine for operational and strategic decision-making, it is, by itself, insufficient for achieving long-term, systemic self-improvement. The OODA loop optimizes an agent's ability to act and react within its current set of capabilities and understanding. It allows the agent to become a master of its existing game. However, it does not provide a formal mechanism for the agent to change the rules of the game itself—to improve its fundamental architecture, develop new tools, or evolve its core objectives over time. To achieve this, a second, higher-level cognitive process is required: a meta-cognitive framework dedicated to process improvement. The principles of the Agile Manifesto, repurposed from software development, provide the ideal blueprint for this framework.


The Agile Manifesto as an Agent's Constitution


The Agile Manifesto was created by a group of software developers to address the failures of rigid, plan-driven processes like the Waterfall model.7 They proposed a set of values and principles that prioritize adaptability, collaboration, tangible results, and continuous improvement. These same principles can be translated from a team of human developers into a core "operating system" for a single, self-improving cognitive entity.
The four core values are directly applicable:
* Individuals and interactions over processes and tools: For an agent, this translates to valuing the dynamic synthesis of its internal cognitive states (Orient) over the rigid execution of pre-defined tool-use sequences (Act).
* Working software over comprehensive documentation: Tangible improvements in performance metrics (e.g., success rate, efficiency) are the primary measure of progress, not the elegance of an internal plan that never gets executed effectively.6
* Customer collaboration over contract negotiation: The agent's "customer" is its core mandate or objective function. The agent must continuously interact with this mandate, refining its understanding of it through experience, rather than treating it as a fixed, one-time contract.
* Responding to change over following a plan: This is the philosophical heart of agility. The agent must be architected to embrace change and adapt its own internal processes and strategies as it learns more about its environment and itself.7
From the twelve supporting principles, several are particularly critical for architecting an evolving agent:
* "Our highest priority is to satisfy the customer through early and continuous delivery of valuable software".6 For the agent, this means its highest priority is to achieve its core mandate through early and continuous delivery of improvements to its own operational effectiveness.
* "Welcome changing requirements, even late in development".6 The agent's internal architecture must be plastic, allowing it to adapt its priorities and strategies in response to new data or a changing environment.
* "At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly".6 This is the most crucial principle, as it explicitly mandates the existence of a formal, periodic meta-cognitive loop for self-improvement. This is the mechanism for evolving the OODA loop itself.


The Agent's "Agile Sprint" for Self-Improvement


This meta-cognitive framework can be implemented as a second, slower-paced loop that governs the high-frequency OODA loop. This "Agile Reflection" cycle functions like a retrospective at the end of a development sprint.
* Triggering Reflection: This meta-loop would not run on every operational cycle. It could be triggered periodically (e.g., after a set number of OODA cycles), or by specific events (e.g., upon encountering a critical failure, a novel success, or a significant drop in performance metrics).
* The Reflection Process (The Agent's "Retrospective"):
   1. Review Performance: The agent analyzes its own performance logs from the preceding operational period. It reviews its episodic memory, looking at success/failure rates, resource consumption, time-to-completion, and patterns of tool usage. This corresponds to evaluating its "working software".23
   2. Identify Inefficiencies and Opportunities: It searches for patterns. Are there specific classes of problems where it consistently fails? Are there tools that are frequently used but are slow or error-prone? Are there decision paths in its OODA loop that are consistently suboptimal?
   3. Propose Improvements: Based on this analysis, the agent generates concrete, testable hypotheses for improving its own internal systems. These are not actions in the world, but modifications to itself. Examples might include: "My search query generation heuristic is often suboptimal; I should generate three variants and use an internal critic to select the best one," or "I consistently fail on tasks requiring complex data transformation; I should propose the development of a new, higher-level tool for my manifest," or "My orientation phase is taking too long; I should refine my orientation prompt to be more concise and focused."
   4. Commit to Change: The agent selects one or two high-priority improvements and commits them. This could involve updating its own "procedural memory," modifying a heuristic in its configuration, or adding a requirement to its own development backlog. This mirrors the Agile practice of a team committing to a single process improvement for the next sprint, ensuring stable, incremental growth.13
This integration of Agile principles creates a crucial separation of concerns between "doing the work" (the OODA loop) and "improving the work process" (the Agile loop). This cognitive division of labor is a hallmark of advanced intelligence. It prevents the agent from getting bogged down in meta-cognition during time-sensitive operational tasks, allowing it to maintain a high operational tempo. The OODA loop represents the agent's "flow state" or its System 1 (fast, intuitive) thinking, while the Agile Reflection cycle represents its "deliberate practice" or System 2 (slow, analytical) thinking. This hierarchical structure, with two distinct clock speeds for action and reflection, is not merely an elegant design but a necessary architecture for creating an agent that is both highly performant and capable of deep, sustainable improvement.


V. The A-OODA Protocol: A Synthesis for a Self-Improving System


The synthesis of these concepts—the tactical execution of ReAct-style primitives, the strategic cognition of the OODA loop, and the meta-cognitive improvement framework of Agile—results in the A-OODA Protocol. This is a hierarchical, multi-loop cognitive architecture designed specifically to enable autonomous, long-term self-improvement. It provides a formal structure that balances high-frequency operational demands with low-frequency strategic reflection and adaptation.


Formal Definition of the A-OODA Protocol


The A-OODA protocol is defined by two nested control loops operating at different frequencies, with a third layer of on-demand subroutines for task execution.
* The Outer Loop (Agile Reflection Cycle - Low Frequency):
   * Purpose: Strategic self-improvement and meta-cognitive adjustment. This loop's function is to evolve the agent's own cognitive machinery.
   * Trigger: Can be time-based (e.g., every 1,000 OODA cycles), event-based (e.g., critical failure rate exceeds a threshold, a novel success is achieved), or resource-based (e.g., during periods of low operational demand).
   * Phases:
      1. Retrospect: The agent analyzes its historical performance data, ingesting logs from its episodic memory to identify systemic patterns, inefficiencies, and opportunities for improvement.
      2. Hypothesize: It generates potential modifications to its core components. These are not actions in the world but changes to its own "source code," such as updating core heuristics, proposing new tools, or refining its OODA loop prompting strategies.
      3. Adapt: The agent commits one or more high-priority changes to its procedural memory or configuration. This is a deliberate, version-controlled write-action to its own operational parameters.
* The Inner Loop (OODA Operational Cycle - High Frequency):
   * Purpose: Tactical and strategic execution of tasks within the environment. This is the agent's primary "real-time" thought process.
   * Phases: It continuously executes the Observe, Orient, Decide, Act cycle. Crucially, its behavior within this loop is governed by the current set of heuristics, tools, and models defined and refined by the Outer Loop.
* Action Execution (ReAct-style Subroutines - On-Demand):
   * Purpose: Atomic execution of complex, tool-based sub-tasks.
   * Trigger: Invoked during the Act phase of the OODA loop when a decision requires a structured sequence of tool interactions.
   * Structure: This is a constrained, tactical Thought -> ToolUse -> Observation sequence. The initial Thought is provided by the OODA loop's Decide phase, which sets the goal for the subroutine. This effectively contains the power of ReAct in a controlled, subordinate role, using it as a reliable tool for execution rather than as the overarching cognitive model.


The Flow of Cognition: An Illustrative Scenario


Consider an agent tasked with a long-running objective: "Monitor our primary competitor's new product launch and provide weekly summaries of key changes."
1. Initial OODA Cycle (Observe): The agent receives the initial prompt.
2. OODA Cycle (Orient): It synthesizes the prompt with its knowledge: "This is a long-term monitoring task, not a one-shot query. Success requires a persistent process. My current tools include a web search/scrape function and a text summarizer."
3. OODA Cycle (Decide): It forms a hypothesis: "I can accomplish this by setting up a weekly cron job to scrape the competitor's product page, diff the content against last week's version, and summarize the changes."
4. OODA Cycle (Act): It executes a series of ReAct-style subroutines to set up the necessary files and cron job.
5. Ongoing Operation: For several weeks, the agent successfully executes its OODA loop, observing the website, orienting to minor text changes, deciding to summarize them, and acting by producing a report.
6. Critical Failure Event: The competitor redesigns their website to be a highly dynamic single-page application built with JavaScript. The agent's simple web scraping tool now consistently fails, returning no useful content.
7. Agile Loop Trigger: After several consecutive failures, the agent's internal monitoring detects that its task success rate for this objective has dropped to 0%. This critical failure rate triggers the Outer Loop.
8. Agile Loop (Retrospect): The agent analyzes its logs. The pattern is undeniable: "My scrape_static_html procedure has a 100% failure rate against the target URL since date Y."
9. Agile Loop (Hypothesize): It reasons about the failure: "The tool is failing, but the objective remains. My existing toolset is inadequate for JavaScript-rendered websites. Hypothesis: I require a new tool that can render a webpage in a headless browser and extract the final DOM content. This would solve not just this problem, but an entire class of potential future problems."
10. Agile Loop (Adapt): The agent performs a self-modification. It adds a new requirement to its own development backlog, flagging it for its human maintainers. It also updates its procedural memory with a new heuristic: "If scrape_static_html fails on a target more than twice, classify the target as 'dynamic' and escalate with a request for the headless_browser_render tool."
This scenario illustrates the power of the hierarchical structure. The agent handles routine tasks efficiently with its fast OODA loop. But when faced with a systemic problem that its current capabilities cannot solve, it has a built-in mechanism to pause, reflect at a higher level of abstraction, diagnose the root cause, and adapt its own fundamental capabilities to overcome the challenge.
The Cognitive Architectures for Language Agents (CoALA) framework provides the formal vocabulary to describe this system.24 A-OODA is a specific instantiation of a CoALA-style architecture, with explicit, modular components for Memory (working, episodic, procedural), a structured Action Space (internal vs. external actions), and a generalized, hierarchical Decision-Making procedure.
To crystallize the conceptual leap represented by this protocol, the following table provides a comparative analysis of the different agentic frameworks.


Feature
	ReAct (Reasoning + Acting)
	OODA (Observe, Orient, Decide, Act)
	A-OODA (Agile-Oriented OODA)
	Primary Goal
	Correctly complete a given task.
	Make effective decisions faster than an opponent or environment.
	Achieve long-term improvement in operational effectiveness.
	Loop Structure
	Single, linear loop (Thought-Action-Observation).
	Single, cyclical, non-linear loop.
	Hierarchical: Low-frequency Agile loop, high-frequency OODA loop.
	Key Cognitive Phase
	Thought (planning the next action).
	Orient (synthesizing data into a worldview).
	Retrospect & Adapt (meta-level analysis and self-modification).
	Handling of Uncertainty
	Fragile; can be derailed by non-informative observations.8
	Robust; designed for incomplete information via hypothesis testing.17
	Anti-fragile; uses failures and surprises as explicit triggers for systemic improvement.
	Mechanism for Improvement
	None formalized. Improvement is external (developer tuning).
	Implicit; faster/better orientation leads to better outcomes.
	Explicit; a dedicated, periodic meta-cognitive loop for self-tuning.
	Cognitive Analogy
	A skilled assembly line worker following instructions.
	A fighter pilot or field commander adapting to a dynamic battlefield.
	An entire R&D organization that both operates and improves itself.
	

VI. Specification: The AGENTS.md Living Document


The A-OODA protocol requires more than just a different algorithm; it demands a new way of representing the agent's identity and operational logic. For a self-improving agent, static documentation is obsolete upon creation. The agent's core definition must be a dynamic, machine-readable, and partially agent-modifiable "constitution" that both describes and governs its behavior. The AGENTS.md file is conceived as this living document. It is the agent's self-concept, a version-controlled source of truth that evolves with the agent itself.


Preamble: The Purpose of a Living Document


The AGENTS.md file serves as the central repository for the agent's foundational principles, architectural definitions, and operational knowledge. Key sections, such as the Reflection Log and parts of the Procedural Memory, are designed to be writable by the agent itself as a result of its Agile Reflection cycle. This transforms the document from a passive description into an active component of the agent's cognitive architecture. It is the tangible record of its evolution and the repository of its accumulated wisdom.
The following table provides a detailed specification for the structure and content of the AGENTS.md file.


Section ID
	Section Name
	Purpose
	Content/Format Requirements (YAML Frontmatter or Markdown)
	Modifiability
	1.0
	Core Mandate & Values
	Defines the agent's ultimate purpose and ethical boundaries. The foundational, semi-immutable principles guiding all behavior.
	YAML format. Must include agent_name, version, core_mandate (string), and a list of values (e.g., "Prioritize continuous improvement," "Treat actions as experiments").
	Semi-Immutable (Human-modifiable with high privilege)
	2.0
	Cognitive Architecture
	A formal, machine-readable definition of the A-OODA protocol as implemented for this agent.
	YAML format. Defines outer_loop (Agile) and inner_loop (OODA) parameters, including triggers for the outer loop (e.g., failure_rate_threshold: 0.75, ooda_cycles_per_reflection: 1000).
	Agent-Proposable (Changes require human review)
	3.0
	Memory Architecture
	Defines the schemas and access protocols for the agent's memory systems, per the CoALA framework.24
	YAML format. Specifies paths and schemas for working_memory (JSON), episodic_memory (append-only log of OODA tuples), and procedural_memory (directory of version-controlled heuristic files).
	Agent-Proposable (Schema changes require review)
	4.0
	Action & Tool Manifest
	A version-controlled registry of all internal and external capabilities available to the agent.
	Markdown with YAML frontmatter for each tool. Each entry defines action_id, version, type (internal/external), signature, description, and dependencies.
	Agent-Proposable (New tools require human implementation/review)
	5.0
	Performance Heuristics
	A library of specific, version-controlled heuristics and objective functions used to guide behavior and self-evaluation.
	Directory of script files (e.g., Python, JS) referenced by procedural memory. Each file represents a specific heuristic (e.g., query_generator.py, risk_assessor.py).
	Agent-Modifiable (Changes are logged in 6.0)
	6.0
	Reflection Log & Change History
	The agent's append-only journal. A transparent, immutable log of its self-improvement journey, maintained by the agent itself.
	Markdown file. Each entry is timestamped and generated by the Agile Outer Loop, containing Reflection (analysis), Hypothesis (proposed change), and Commit (diff/link to the modified file in 5.0 or proposal for 2.0-4.0).
	Append-Only (Agent-writable)
	

Detailed Section Breakdown


* 1.0 Core Mandate & Values: This section acts as the agent's "conscience." The core_mandate is its ultimate objective function. The values, derived from Agile principles 6, provide high-level guidance for how to pursue that mandate, especially in novel situations. For example, a value like "Simplicity--the art of maximizing the amount of work not done--is essential" 6 can guide the agent to seek more efficient solutions during its reflection cycle.
* 2.0 Cognitive Architecture: This section makes the agent's thought process explicit and configurable. By defining the triggers for the Agile Reflection cycle, developers can tune the agent's "reflectiveness." An agent in a rapidly changing environment might need a lower ooda_cycles_per_reflection value to adapt more quickly.
* 3.0 Memory Architecture: This formalizes the agent's memory systems, a key component of advanced cognitive architectures.24 The episodic_memory is particularly crucial, as it provides the raw data for the Retrospect phase of the Agile loop. It must log not just actions and outcomes, but the agent's Orientation and Decision at each step, allowing it to later analyze its own reasoning.
* 4.0 Action & Tool Manifest: This is a comprehensive and versioned list of what the agent can do. When the agent hypothesizes the need for a new tool during its reflection cycle, it can generate a new entry for this manifest, flagging it for human developers to implement. This creates a tight feedback loop between the agent's identified needs and the development process.
* 5.0 Performance Heuristics: This is the most dynamic and critical section for self-improvement. It contains the agent's "software." These are the specific pieces of logic it uses to make decisions—how it formulates search queries, how it evaluates the trustworthiness of a source, how it prioritizes tasks. The Agile Reflection cycle's primary output is to propose and commit changes to these files, allowing the agent to tangibly improve its own intelligence over time.
* 6.0 Reflection Log & Change History: This section provides ultimate transparency and traceability. It is the immutable record of the agent's evolution. By reviewing this log, developers can understand not just what the agent changed about itself, but why. Each entry is a self-contained story of a learning event: the agent encountered a problem, analyzed it, formed a hypothesis for a solution, and implemented a change. This log is the narrative of the agent's journey from its initial state to its more advanced future self.


VII. Conclusion: Architecting the Evolving Agent


The A-OODA protocol represents a paradigm shift from the current state of agentic AI. By moving beyond the tactical, linear loops of frameworks like ReAct, it establishes a robust, hierarchical cognitive architecture designed for the express purpose of continuous and autonomous self-improvement. The synthesis of ReAct's execution efficiency, the OODA loop's strategic adaptability, and Agile's meta-cognitive reflection provides a comprehensive solution to the challenge of creating agents that not only perform tasks but actively evolve their own capabilities. The Inner OODA Loop equips the agent to handle uncertainty and act decisively in dynamic environments, while the Outer Agile Loop provides a formal mechanism for it to learn from its experience, identify systemic flaws in its own logic, and implement meaningful, lasting improvements.
The specification of the AGENTS.md file translates this powerful theoretical framework into an actionable engineering blueprint. It redefines documentation as a living constitution—a dynamic, machine-readable, and partially self-modifying component of the agent's own mind. This document provides the structure for the agent's core values, its cognitive processes, its memory, and its capabilities, while also serving as the immutable ledger of its own evolution. It is the substrate upon which the agent's self-improvement journey is written.
This approach fundamentally reframes the role of the human developer in the age of autonomous agents. Our task is evolving from that of a "programmer" who dictates an agent's every behavior to that of an "architect" who designs the foundational systems for a self-organizing, learning intelligence. The primary responsibility becomes the careful construction of the initial AGENTS.md—defining the core mandate, establishing safe operational values, and building the meta-cognitive loops that empower the agent to learn and grow responsibly. By architecting the capacity for reflection, we enable the agent to write the rest of its own story. The A-OODA protocol and its accompanying AGENTS.md specification offer a concrete path toward this future, paving the way for a new generation of more capable, more robust, and genuinely intelligent autonomous systems.
Works cited
1. What is a ReAct Agent? | IBM, accessed October 8, 2025, https://www.ibm.com/think/topics/react-agent
2. ReAct: Synergizing Reasoning and Acting in Language Models - arXiv, accessed October 8, 2025, https://arxiv.org/pdf/2210.03629
3. ReAct: Integrating Reasoning and Acting with Retrieval-Augmented Generation (RAG, accessed October 8, 2025, https://bluetickconsultants.medium.com/react-integrating-reasoning-and-acting-with-retrieval-augmented-generation-rag-a6c2e869f763
4. How the OODA Loop Decision-Making Model Drives DevOps Success | Copado, accessed October 8, 2025, https://www.copado.com/resources/blog/how-the-ooda-loop-decision-making-model-drives-devops-success
5. OODA loop - Wikipedia, accessed October 8, 2025, https://en.wikipedia.org/wiki/OODA_loop
6. Principles behind the Agile Manifesto, accessed October 8, 2025, https://agilemanifesto.org/principles.html
7. What is the Agile Manifesto? 12 Principles & 4 Values - Adobe for Business, accessed October 8, 2025, https://business.adobe.com/blog/basics/agile-manifesto
8. ReAct - Prompt Engineering Guide, accessed October 8, 2025, https://www.promptingguide.ai/techniques/react
9. ReACT agent LLM: Making GenAI react quickly and decisively - K2view, accessed October 8, 2025, https://www.k2view.com/blog/react-agent-llm/
10. Building a ReAct Agent from Scratch: A Deep Dive into AI Reasoning | by Plaban Nayak | Medium, accessed October 8, 2025, https://nayakpplaban.medium.com/building-a-react-agent-from-scratch-a-deep-dive-into-ai-reasoning-a47fb295eb06
11. www.forecast.app, accessed October 8, 2025, https://www.forecast.app/blog/difference-between-agile-waterfall#:~:text=Agile%20is%20flexible%20and%20iterative,and%20execution%20in%20predetermined%20stages.
12. Difference between agile and waterfall approaches to project management - APM, accessed October 8, 2025, https://www.apm.org.uk/resources/find-a-resource/agile-project-management/difference-between-agile-and-waterfall-approaches/
13. Agile Manifesto: Values and Principles Explained - tecnovy Academy, accessed October 8, 2025, https://tecnovy.com/en/agile-manifesto
14. OODA loop | Research Starters - EBSCO, accessed October 8, 2025, https://www.ebsco.com/research-starters/military-history-and-science/ooda-loop
15. Mastering the OODA Loop: A Comprehensive Guide to Decision-Making in Business, accessed October 8, 2025, https://corporatefinanceinstitute.com/resources/management/ooda-loop/
16. From Battlefield to Business: Applying the OODA Loop | StackState, accessed October 8, 2025, https://www.stackstate.com/blog/from-battlefield-to-business-applying-the-ooda-loop/
17. What's an OODA Loop and How to Use It - Miro, accessed October 8, 2025, https://miro.com/strategic-planning/what-is-ooda-loop/
18. OODA Loop - ModelThinkers, accessed October 8, 2025, https://modelthinkers.com/mental-model/ooda-loop
19. The OODA Loop -- Observe, Orient, Decide, Act - LessWrong, accessed October 8, 2025, https://www.lesswrong.com/posts/hgttKuASB55zjoCKd/the-ooda-loop-observe-orient-decide-act
20. The OODA Loop: How Fighter Pilots Make Fast and Accurate Decisions - Farnam Street, accessed October 8, 2025, https://fs.blog/ooda-loop/
21. OODA loop | Untools, accessed October 8, 2025, https://untools.co/ooda-loop/
22. Manifesto for Agile Software Development, accessed October 8, 2025, https://agilemanifesto.org/
23. A Beginner's Guide to The Agile Manifesto: The 12 Principles - ICAgile, accessed October 8, 2025, https://www.icagile.com/resources/a-beginner-s-guide-to-the-agile-manifesto-the-12-principles
24. Cognitive Architectures for Language Agents - arXiv, accessed October 8, 2025, https://arxiv.org/pdf/2309.02427
25. Cognitive Architectures for Language Agents - arXiv, accessed October 8, 2025, https://arxiv.org/html/2309.02427v3
26. [2309.02427] Cognitive Architectures for Language Agents - arXiv, accessed October 8, 2025, https://arxiv.org/abs/2309.02427